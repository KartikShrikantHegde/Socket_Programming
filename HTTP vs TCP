The most fundamental difference between the two is that  TCP and HTTP works at different layers, i.e, they have independent (and radically different ) tasks to perform. You can have both protocols in your application, you can have either of the two or you can have none. 

Leaving the lower levels, let us start with the network level which is home to the famous IPv4 protocol. Its main aim is to route the data packets from the source to the destination. It does not care about what data it is carrying and whether it was delivered to the destination or not. It will make its best effort and that's all.

Now enter the transport layer, residence of TCP protocol. Once the route is set, TCP protocol is entrusted with the responsibility of transferring the data reliably. Hence it has mechanism to check if the packet was received or not ( in the form of ACKnowledgement fields ), to put the packets in sequence if they  became out of order in transit and many more. It also doesn't care about data it is transmitting. UDP is another widely used protocol at this level but that is a different story. 

And the final layer of interest is the application layer. It is the layer that is nearest to the application and HTTP is just one of the various protocols used. The reason it is widely popular is that it is used by web browsers to communicate with the web server and fetch the webpages that you see. In the same way that HTTP is used by browsers, SMTP and IMAP is used by email-clients. It has no role whatsoever in setting up the connection, it is only application specific. It assumes that you know how to find the route to the webserver ( courtsey IPv4 ) and have setup a connection and can transfer data reliably ( courtsey TCP ). It is only concerned with the data that you exchange; what is its URL, what is its type, where to find it.
